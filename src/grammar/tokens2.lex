LINE_TERMINATOR @@@ (\r|\n|(\r\n))(\r|\n|(\r\n))*
WHITESPACE @@@ (\t| |\r|\n)(\t| |\r|\n)*
SINGLE_LINE_COMMENT @@@ //(^\n)*
MULTI_LINE_COMMENT @@@ /\*((^\*)|(\*\**(^\*/)))*\*\**/
ABSTRACT @@@ abstract
BOOLEAN @@@ boolean
BREAK @@@ break
BYTE @@@ byte
CASE @@@ case
CATCH @@@ catch
CHAR @@@ char
CLASS @@@ class
CONST @@@ const
CONTINUE @@@ continue
DEFAULT @@@ default
DO @@@ do
DOUBLE @@@ double
ELSE @@@ else
EXTENDS @@@ extends
FINAL @@@ final
FINALLY @@@ finally
FLOAT @@@ float
FOR @@@ for
GOTO @@@ goto
IF @@@ if
IMPLEMENTS @@@ implements
IMPORT @@@ import
INSTANCEOF @@@ instanceof
INTERFACE @@@ interface
INT @@@ int
LONG @@@ long
NATIVE @@@ native
NEW @@@ new
PACKAGE @@@ package
PRIVATE @@@ private
PROTECTED @@@ protected
PUBLIC @@@ public
RETURN @@@ return
SHORT @@@ short
STATIC @@@ static
STRICTFP @@@ strictfp
SUPER @@@ super
SWITCH @@@ switch
SYNCHRONIZED @@@ synchronized
THIS @@@ this
THROW @@@ throw
THROWS @@@ throws
TRANSIENT @@@ transient
TRY @@@ try
VOID @@@ void
VOLATILE @@@ volatile
WHILE @@@ while
DEC_INT_LITERAL @@@ 0|(1-9)(0-9)*
OCT_INT_LITERAL @@@ 0(0-9)(0-9)*
HEX_INT_LITERAL @@@ 0x((0-9)|(a-f)|(A-F))((0-9)|(a-f)|(A-F))*
BOOLEAN_LITERAL @@@ (true)|(false)
CHAR_LITERAL @@@ '((^'\r\n\\)|(\\\\|\\'|\\")|(\\((0-3)?(0-7)(0-7)?)))'
STRING_LITERAL @@@ "((^"\r\n\\)|(\\\\|\\'|\\")|(\\((0-3)?(0-7)(0-7)?)))*"
NULL_LITERAL @@@ null
LPAREN @@@ \(
RPAREN @@@ \)
LBRKT @@@ [
RBRKT @@@ ]
LBRAC @@@ {
RBRAC @@@ }
SEMI @@@ ;
COMMA @@@ ,
DOT @@@ .
EQUAL @@@ ==
LESSER_OR_EQUAL @@@ <=
GREATER_OR_EQUAL @@@ >=
NOT_EQUAL @@@ !=
ASSIGN @@@ =
GREATER @@@ >
LESSER @@@ <
EXCLAIMATION @@@ !
TILDA @@@ ~
QUESTION @@@ \?
COLON @@@ :
AND @@@ &&
OR @@@ \|\|
INCREMENT @@@ ++
DECREMENT @@@ \-\-
ADDITION @@@ +
SUBTRACTION @@@ \-
MULTIPLICATION @@@ \*
DIVISION @@@ /
BITWISEAND @@@ &
BITWISEOR @@@ \|
BITWISEXOR @@@ \^
MODULUS @@@ %
LEFT_SHIFT @@@ <<
RIGHT_SHIFT @@@ >>
UNSIGNED_RIGHT_SHIFT @@@ >>>
PLUS_EQUALS @@@ +=
MINUS_EQUALS @@@ \-=
MULTIPLY_EQUALS @@@ \*=
DIVISION_EQUALS @@@ /=
BITWISEAND_EQUALS @@@ &=
BITWISEOR_EQUALS @@@ \|=
BITWISEXOR_EQUALS @@@ \^=
MODULUS_EQUALS @@@ %=
LEFTSHIFT_EQUALS @@@ <<=
RIGHTSHIFT_EQUALS @@@ >>=
UNSIGNED_RIGHTSHIFT_EQUALS @@@ >>>=
IDENTIFIER @@@ ((a-z)|(A-Z)|_|$)((a-z)|(A-Z)|(0-9)|_|$)*